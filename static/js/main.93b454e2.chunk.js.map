{"version":3,"sources":["components/AddTask.js","components/Element.js","pages/DetailsTaskPage.js","components/List.js","layouts/App.js","serviceWorker.js","index.js"],"names":["AddTask","props","value","getInputValue","addTask","date","getDate","minDate","errors","messages","success","className","htmlFor","id","onChange","emptyTask","task_empty","existingTask","task_existing","type","min","max","onClick","Element","text","done","finished","remove","to","DetailsTaskPage","style","textAlign","elements","list","filter","element","parseInt","match","params","map","key","currentDate","Date","toISOString","slice","message","daysLeft","parse","calculateDate","length","List","sort","a","b","elementsDone","doneList","basename","exact","path","render","App","state","inputValue","epmtyTask","handleAddTask","validation","formValidation","correct","push","setState","task_length","task_unique","trim","handleInputValue","e","target","handleDate","document","querySelector","handleDeleteTask","index","findIndex","item","index2","splice","handleDoneTasks","Array","from","doneTask","find","this","setTimeout","Component","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93b454e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddTask = (props) => {\r\n\r\n    const title = \"Wpisz zadanie do zrobienia:\";\r\n    const buttonText = \"Dodaj zadanie\";\r\n    const maxDate = \"2030-01-01\";\r\n\r\n    const { value, getInputValue, addTask, date, getDate, minDate, errors, messages, success } = props;\r\n    return (\r\n        <section className=\"root__to-do-list-panel list-panel\">\r\n            <h1 className=\"list-panel__headline headline\">Lista zadań</h1>\r\n            <div className=\"list-panel__input-wrapper\">\r\n                <label className=\"list-panel__input-label\" htmlFor=\"task\">{title}</label>\r\n                <input className=\"list-panel__input\" id=\"task\" value={value} onChange={getInputValue} />\r\n                {errors.emptyTask && <p className=\"list-panel__error\">{messages.task_empty}!</p>}\r\n                {errors.existingTask && <p className=\"list-panel__error\">{messages.task_existing}!</p>}\r\n            </div>\r\n            <div className=\"list-panel__input-wrapper\">\r\n                <label className=\"list-panel__input-label\" htmlFor=\"task\">Termin wykonania:</label>\r\n                <input className=\"list-panel__input\" type=\"date\" onChange={getDate} value={date} min={minDate} max={maxDate} />\r\n            </div>\r\n            <button className=\"list-panel__button button\" onClick={addTask}>{buttonText}</button>\r\n            {success && <h3>{success}</h3>}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AddTask","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Element = ({ text, date, id, done, finished, remove }) => {\r\n\r\n    if (!finished) {\r\n        return (\r\n            <>\r\n                <li className=\"tasks__item\"><span className=\"tasks__content\"><NavLink to={`/task/${id}`}>{text}</NavLink></span>{<sub className=\"tasks__date\"> {date ? `(${date}) ` : ``}</sub>} <button className=\"tasks__delete-task button\" onClick={() => { remove(id) }}>Usuń</button> <button className=\"tasks__done-task button\" onClick={() => { done(id) }}>Zrobione</button> </li>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <li className=\"tasks__item\">{<span className=\"tasks__content\">{text}</span>}{<sub className=\"tasks__date\">({date})</sub>} <button className=\"tasks__delete-task button\" onClick={() => { remove(id) }}>Usuń</button> </li>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Element","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst DetailsTaskPage = (props) => {\r\n\r\n    const style = {\r\n        textAlign: \"center\",\r\n    }\r\n\r\n    const calculateDate = (date) => {\r\n        let currentDate = new Date().toISOString().slice(0, 10);\r\n        let message = \"\";\r\n\r\n        if (date === currentDate) {\r\n            message = \"Termin do dziś\";\r\n        } else {\r\n            let daysLeft = Date.parse(date) - Date.parse(currentDate);\r\n            daysLeft = daysLeft / (1000 * 3600 * 24);\r\n            if (daysLeft === 1) message = `Został Ci ${daysLeft} dzień`;\r\n            else\r\n                message = `Zostało Ci ${daysLeft} dni`;\r\n        }\r\n        return message\r\n    }\r\n\r\n    let elements = props.list.filter(element => (\r\n        (parseInt(props.match.params.id) === element.id)\r\n    ))\r\n\r\n    elements = elements.map(element => (\r\n        <div key={element.id} style={style}>\r\n            <p className=\"details__name\">{element.text}</p>\r\n            <p className=\"details__name\">{calculateDate(element.date)}</p>\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {elements.length >= 1 && <h2 className=\"headline--details headline\">Szczegóły zadania</h2>}\r\n            {elements}\r\n            {elements.length >= 1 && <Link to=\"/\"><button className=\"button button--details\">Zamknij podgląd</button></Link>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailsTaskPage","import React from 'react'\r\nimport Element from './Element'\r\nimport DetailsTaskPage from '../pages/DetailsTaskPage'\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\n\r\nconst List = (props) => {\r\n\r\n    if (props.list.length >= 2) {\r\n        props.list.sort((a, b) => {\r\n            if (a.date > b.date) {\r\n                return 1\r\n            }\r\n            if (a.date < b.date) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n    const { list } = props;\r\n\r\n    const elements = props.list.map(element => <Element done={props.done} remove={props.remove} key={element.id} date={element.date} id={element.id} text={element.text} />)\r\n\r\n    const elementsDone = props.doneList.map(element => <Element finished={element.finished} done={props.done} remove={props.remove} key={element.id} date={element.date} id={element.id} text={element.text} />)\r\n    return (\r\n        <HashRouter basename='/'>\r\n            <section className=\"details\">\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/task/:id\"\r\n                        render={(props) => <DetailsTaskPage {...props} list={list} />}\r\n                    />\r\n                </Switch>\r\n            </section>\r\n            <section className=\"root__tasks-list tasks\">\r\n                <div className=\"tasks__wrapper\">\r\n                    {elements.length > 0 && <h2 className=\"tasks__headline headline\">Do zrobienia ({elements.length})</h2>}\r\n                    {<ul className=\"tasks__list\">{elements}</ul>}\r\n\r\n                </div>\r\n                <div className=\"tasks__wrapper\">\r\n                    {elementsDone.length > 0 && <h2 className=\"tasks__headline headline\">Zrobione ({elementsDone.length})</h2>}\r\n                    <ul className=\"tasks__list\">{elementsDone.length > 0 && elementsDone}</ul>\r\n                </div>\r\n            </section>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\nimport Addtask from '../components/AddTask'\nimport List from '../components/List'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nclass App extends Component {\n\n  currentDate = new Date().toISOString().slice(0, 10);\n  id = 0;\n\n  state = {\n    inputValue: \"\",\n    list: [],\n    doneList: [],\n    date: this.currentDate,\n    message: '',\n\n    errors: {\n      epmtyTask: false,\n      existingTask: false\n    }\n\n  }\n\n  messages = {\n    task_empty: 'Wpisz zadanie',\n    task_existing: 'Takie zadanie istnieje',\n  }\n\n  handleAddTask = () => {\n\n    const validation = this.formValidation();\n\n    if (validation.correct) {\n      const list = this.state.list;\n      list.push({\n        id: this.id,\n        text: this.state.inputValue,\n        date: this.state.date\n      });\n      this.setState({\n        list,\n        inputValue: \"\",\n        message: 'Zadanie dodane!',\n\n        errors: {\n          epmtyTask: false,\n          existingTask: false\n        }\n\n      })\n      this.id++;\n    } else {\n      this.setState({\n        errors: {\n          emptyTask: !validation.task_length,\n          existingTask: !validation.task_unique,\n        }\n      })\n    }\n  }\n\n  formValidation = () => {\n    let task_length = false;\n    let task_unique = false;\n    let correct = false;\n\n    if (this.state.inputValue.length > 0 && this.state.inputValue.trim().length > 0) {\n      task_length = true;\n    }\n\n    let elements = this.state.list.filter(element => (\n      element.text === this.state.inputValue\n    ))\n\n    if (!elements.length > 0) {\n      task_unique = true;\n    }\n\n    if (task_length && task_unique) {\n      correct = true\n    }\n\n    return ({\n      correct,\n      task_length,\n      task_unique,\n    })\n\n  }\n\n  handleInputValue = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  handleDate = (e) => {\n\n    if (e.target.value < this.currentDate) document.querySelector(\"input[type=date]\").value = `${this.currentDate}`;\n\n    this.setState({\n      date: e.target.value\n    })\n\n  }\n\n  handleDeleteTask = (id) => {\n\n    const list = [...this.state.list]\n    const index = list.findIndex(item => item.id === id);\n\n    const doneList = [...this.state.doneList]\n    const index2 = doneList.findIndex(item => item.id === id);\n\n    if (index !== -1) { list.splice(index, 1) }\n    else {\n      doneList.splice(index2, 1)\n    }\n\n    this.setState({\n      list,\n      doneList\n    })\n\n  }\n\n  handleDoneTasks = (id) => {\n    const list = Array.from(this.state.list);\n    const doneList = Array.from(this.state.doneList);\n\n    const index = list.findIndex(item => item.id === id);\n    const doneTask = list.find(item => item.id === id);\n\n    doneTask.finished = true;\n\n    doneList.push(doneTask);\n    list.splice(index, 1)\n\n    this.setState({\n      list,\n      doneList\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.state.message !== '') {\n      setTimeout(() => this.setState({\n        message: ''\n      }), 2000)\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <Addtask\n          value={this.state.inputValue}\n          getInputValue={this.handleInputValue}\n          addTask={this.handleAddTask}\n          date={this.state.date}\n          getDate={this.handleDate}\n          minDate={this.currentDate}\n          messages={this.messages}\n          errors={this.state.errors}\n          success={this.state.message}\n        />\n        <List\n          doneList={this.state.doneList}\n          done={this.handleDoneTasks}\n          remove={this.handleDeleteTask}\n          list={this.state.list}\n          date={this.state.date}\n        />\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './layouts/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}