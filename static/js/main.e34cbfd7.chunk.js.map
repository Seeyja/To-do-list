{"version":3,"sources":["components/AddTask.js","components/Element.js","pages/DetailsTaskPage.js","components/List.js","layouts/App.js","serviceWorker.js","index.js"],"names":["AddTask","props","value","getInputValue","addTask","date","getDate","minDate","emptyTask","className","htmlFor","id","onChange","type","min","max","onClick","Element","text","done","finished","delete","to","DetailsTaskPage","elements","list","filter","element","parseInt","match","params","length","map","key","style","textAlign","currentDate","Date","toISOString","slice","message","daysLeft","parse","calculateDate","List","sort","a","b","elementsDone","doneList","exact","path","render","App","state","inputValue","handleAddTask","push","setState","handleInputValue","e","target","handleDate","document","querySelector","handleDeleteTask","index","findIndex","item","index2","splice","handleDoneTasks","Array","from","doneTask","find","console","log","this","Component","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e34cbfd7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddTask = (props) => {\r\n\r\n    const title = \"Wpisz zadanie do zrobienia:\";\r\n    const buttonText = \"Dodaj zadanie\";\r\n    const maxDate = \"2030-01-01\";\r\n\r\n    const { value, getInputValue, addTask, date, getDate, minDate, emptyTask } = props;\r\n    return (\r\n        <section className=\"root__to-do-list-panel list-panel\">\r\n            <h1 className=\"list-panel__headline headline\">Lista zadań</h1>\r\n            <div className=\"list-panel__input-wrapper\">\r\n                <label className=\"list-panel__input-label\" htmlFor=\"task\">{title}</label>\r\n                <input className=\"list-panel__input\" id=\"task\" value={value} onChange={getInputValue} />\r\n                {emptyTask ? <p className=\"list-panel__error\">Nie wpisałeś zadania!</p> : null}\r\n            </div>\r\n            <div className=\"list-panel__input-wrapper\">\r\n                <label className=\"list-panel__input-label\" htmlFor=\"task\">Termin wykonania:</label>\r\n                <input className=\"list-panel__input\" type=\"date\" onChange={getDate} value={date} min={minDate} max={maxDate} />\r\n            </div>\r\n            <button className=\"list-panel__button button\" onClick={addTask}>{buttonText}</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AddTask","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Element = (props) => {\r\n\r\n    const { text, date, id, done } = props;\r\n\r\n    if (!props.finished) {\r\n        return (\r\n            <>\r\n                <li className=\"tasks__item\"><span className=\"tasks__content\"><NavLink to={`/task/${props.id}`}>{text}</NavLink></span>{<sub className=\"tasks__date\"> {date ? `(${date}) ` : ``}</sub>} <button className=\"tasks__delete-task button\" onClick={() => { props.delete(id) }}>Usuń</button> <button className=\"tasks__done-task button\" onClick={() => { done(id) }}>Zrobione</button> </li>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <li className=\"tasks__item\">{<span className=\"tasks__content\">{text}</span>}{<sub className=\"tasks__date\">({date})</sub>} <button className=\"tasks__delete-task button\" onClick={() => { props.delete(id) }}>Usuń</button> </li>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Element","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst DetailsTaskPage = (props) => {\r\n\r\n    const calculateDate = (date) => {\r\n        let currentDate = new Date().toISOString().slice(0, 10);\r\n        let message = \"\";\r\n\r\n        if (date === currentDate) {\r\n            message = \"Termin do dziś\";\r\n        } else {\r\n            let daysLeft = Date.parse(date) - Date.parse(currentDate);\r\n            daysLeft = daysLeft / (1000 * 3600 * 24);\r\n            message = `Zostało Ci ${daysLeft} dni`;\r\n        }\r\n        return message\r\n    }\r\n\r\n    const elements = props.list.filter(element => (\r\n        (parseInt(props.match.params.id) === element.id)\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {elements.length >= 1 && <h2 className=\"headline--details headline\">Szczegóły zadania</h2>}\r\n            {elements.map(element => (\r\n                <div key={element.id} style={{ textAlign: \"center\" }}>\r\n                    <p className=\"details__name\">{element.text}</p>\r\n                    <p className=\"details__name\">{calculateDate(element.date)}</p>\r\n                </div>\r\n            ))\r\n            }\r\n            {elements.length >= 1 && <Link to=\"/\"><button className=\"button button--details\">Zamknij podgląd</button></Link>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailsTaskPage","import React from 'react'\r\nimport Element from './Element'\r\nimport DetailsTaskPage from '../pages/DetailsTaskPage'\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nconst List = (props) => {\r\n\r\n    if (props.list.length >= 2) {\r\n        props.list.sort((a, b) => {\r\n            if (a.date > b.date) {\r\n                return 1\r\n            }\r\n            if (a.date < b.date) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n    const { list } = props;\r\n\r\n    const elements = props.list.map(element => <Element done={props.done} delete={props.delete} key={element.id} date={element.date} id={element.id} text={element.text} />)\r\n\r\n    const elementsDone = props.doneList.map(element => <Element finished={element.finished} done={props.done} delete={props.delete} key={element.id} date={element.date} id={element.id} text={element.text} />)\r\n    return (\r\n        <>\r\n            <section className=\"details\">\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/task/:id\"\r\n                        render={(props) => <DetailsTaskPage {...props} list={list} />}\r\n                    />\r\n                </Switch>\r\n            </section>\r\n            <section className=\"root__tasks-list tasks\">\r\n                <div className=\"tasks__wrapper\">\r\n                    {elements.length > 0 && <h2 className=\"tasks__headline headline\">Do zrobienia ({elements.length})</h2>}\r\n                    {<ul className=\"tasks__list\">{elements}</ul>}\r\n\r\n                </div>\r\n                <div className=\"tasks__wrapper\">\r\n                    {elementsDone.length > 0 && <h2 className=\"tasks__headline headline\">Zrobione ({elementsDone.length})</h2>}\r\n                    <ul className=\"tasks__list\">{elementsDone.length > 0 && elementsDone}</ul>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\nimport Addtask from '../components/AddTask'\nimport List from '../components/List'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nclass App extends Component {\n\n  currentDate = new Date().toISOString().slice(0, 10);\n  id = 0;\n\n  state = {\n    inputValue: \"\",\n    list: [],\n    doneList: [],\n    date: this.currentDate,\n    emptyTask: false\n  }\n\n  handleAddTask = () => {\n    if (this.state.inputValue.length > 0) {\n      const list = this.state.list;\n      list.push({\n        id: this.id,\n        text: this.state.inputValue,\n        date: this.state.date\n      });\n      this.setState({\n        list,\n        inputValue: \"\",\n        emptyTask: false,\n      })\n      this.id++;\n    } else {\n      this.setState({\n        inputValue: \"\",\n        emptyTask: true,\n      })\n    }\n  }\n\n  handleInputValue = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  handleDate = (e) => {\n\n    if (e.target.value < this.currentDate) document.querySelector(\"input[type=date]\").value = `${this.currentDate}`;\n\n    this.setState({\n      date: e.target.value\n    })\n\n  }\n\n  handleDeleteTask = (id) => {\n\n    const list = [...this.state.list]\n    const index = list.findIndex(item => item.id === id);\n\n    const doneList = [...this.state.doneList]\n    const index2 = doneList.findIndex(item => item.id === id);\n\n    if (index !== -1) { list.splice(index, 1) }\n    else {\n      doneList.splice(index2, 1)\n    }\n\n    this.setState({\n      list,\n      doneList\n    })\n\n  }\n\n  handleDoneTasks = (id) => {\n    const list = Array.from(this.state.list);\n    const doneList = Array.from(this.state.doneList);\n\n    const index = list.findIndex(item => item.id === id);\n    const doneTask = list.find(item => item.id === id);\n    console.log(doneTask)\n\n    doneTask.finished = true;\n\n    doneList.push(doneTask);\n    list.splice(index, 1)\n\n    this.setState({\n      list,\n      doneList\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <Addtask\n          value={this.state.inputValue}\n          getInputValue={this.handleInputValue}\n          addTask={this.handleAddTask}\n          date={this.state.date}\n          getDate={this.handleDate}\n          minDate={this.currentDate}\n          emptyTask={this.state.emptyTask}\n        />\n        <List\n          doneList={this.state.doneList}\n          done={this.handleDoneTasks}\n          delete={this.handleDeleteTask}\n          list={this.state.list}\n          date={this.state.date}\n        />\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './layouts/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}