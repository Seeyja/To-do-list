{"version":3,"sources":["components/AddTask.js","components/Element.js","components/List.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","props","value","getInputValue","addTask","date","getDate","minDate","emptyTask","className","htmlFor","id","onChange","type","min","max","onClick","Element","finished","text","delete","done","List","Elements","list","map","element","key","ElementsDone","doneList","length","App","currentDate","Date","toISOString","slice","state","inputValue","handleAddTask","push","setState","handleInputValue","e","target","handleDate","handleDeleteTask","index","findIndex","item","index2","splice","handleDoneTasks","Array","from","doneTask","find","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e562689d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddTask = (props) => {\r\n\r\n    const title = \"Wpisz zadanie do zrobienia:\";\r\n    const buttonText = \"Dodaj zadanie\";\r\n    const maxDate = \"2030-01-01\";\r\n\r\n    const { value, getInputValue, addTask, date, getDate, minDate, emptyTask } = props;\r\n    return (\r\n        <section className=\"root__to-do-list-panel list-panel\">\r\n            <h1 className=\"list-panel__headline headline\">Lista zadań</h1>\r\n            <div className=\"list-panel__input-wrapper\">\r\n                <label className=\"list-panel__input-label\" htmlFor=\"task\">{title}</label>\r\n                <input className=\"list-panel__input\" id=\"task\" value={value} onChange={getInputValue} />\r\n                {emptyTask ? <p className=\"list-panel__error\">Nie wpisałeś zadania!</p> : null}\r\n            </div>\r\n            <div className=\"list-panel__input-wrapper\">\r\n                <label className=\"list-panel__input-label\" htmlFor=\"task\">Termin wykonania:</label>\r\n                <input className=\"list-panel__input\" type=\"date\" onChange={getDate} value={date} min={minDate} max={maxDate} />\r\n            </div>\r\n            <button className=\"list-panel__button button\" onClick={addTask}>{buttonText}</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AddTask","import React from 'react';\r\n\r\nconst Element = (props) => {\r\n    if (!props.finished) {\r\n        return (\r\n            <>\r\n                <li className=\"tasks__item\"><span className=\"tasks__content\">{props.text}</span>{<sub className=\"tasks__date\"> {props.date ? `(${props.date}) ` : ``}</sub>} <button className=\"tasks__delete-task button\" onClick={() => { props.delete(props.id) }}>Usuń</button> <button className=\"tasks__done-task button\" onClick={() => { props.done(props.id) }}>Zrobione</button> </li>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <li className=\"tasks__item\">{<span className=\"tasks__content\">{props.text}</span>}{<sub className=\"tasks__date\">({props.date})</sub>} <button className=\"tasks__delete-task button\" onClick={() => { props.delete(props.id) }}>Usuń</button> </li>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Element","import React from 'react'\r\nimport Element from './Element'\r\n\r\nconst List = (props) => {\r\n    const Elements = props.list.map(element => <Element done={props.done} delete={props.delete} key={element.id} date={element.date} id={element.id} text={element.text} />)\r\n\r\n    const ElementsDone = props.doneList.map(element => <Element finished={element.finished} done={props.done} delete={props.delete} key={element.id} date={element.date} id={element.id} text={element.text} />)\r\n    return (\r\n        <section className=\"root__tasks-list tasks\">\r\n            <div className=\"tasks__wrapper\">\r\n                {Elements.length > 0 && <h2 className=\"tasks__headline headline\">Do zrobienia ({Elements.length})</h2>}\r\n                <ul className=\"tasks__list\">{Elements}</ul>\r\n            </div>\r\n            <div className=\"tasks__wrapper\">\r\n                {ElementsDone.length > 0 && <h2 className=\"tasks__headline headline\">Zrobione ({ElementsDone.length})</h2>}\r\n                <ul className=\"tasks__list\">{ElementsDone.length > 0 && ElementsDone}</ul>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\nimport Addtask from './AddTask'\nimport List from './List'\n\n\nclass App extends Component {\n\n  currentDate = new Date().toISOString().slice(0, 10);\n  id = 0;\n\n  state = {\n    inputValue: \"\",\n    list: [],\n    doneList: [],\n    date: this.currentDate,\n    emptyTask: false\n  }\n\n  handleAddTask = () => {\n    if (this.state.inputValue.length > 0) {\n      const list = this.state.list;\n      list.push({\n        id: this.id,\n        text: this.state.inputValue,\n        date: this.state.date\n      });\n      this.setState({\n        list,\n        inputValue: \"\",\n        emptyTask: false,\n      })\n      this.id++;\n    } else {\n      this.setState({\n        inputValue: \"\",\n        emptyTask: true,\n      })\n    }\n  }\n\n  handleInputValue = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  handleDate = (e) => {\n    this.setState({\n      date: e.target.value\n    })\n\n  }\n\n  handleDeleteTask = (id) => {\n\n    const list = [...this.state.list]\n    const index = list.findIndex(item => item.id === id);\n\n    const doneList = [...this.state.doneList]\n    const index2 = doneList.findIndex(item => item.id === id);\n\n    if (index !== -1) { list.splice(index, 1) }\n    else {\n      doneList.splice(index2, 1)\n    }\n\n    this.setState({\n      list,\n      doneList\n    })\n\n  }\n\n  handleDoneTasks = (id) => {\n    const list = Array.from(this.state.list);\n    const doneList = Array.from(this.state.doneList);\n    const index = list.findIndex(item => item.id === id);\n    const doneTask = list.find(item => item.id === id);\n    doneTask.finished = true;\n\n    doneList.push(doneTask);\n    list.splice(index, 1)\n\n    this.setState({\n      list,\n      doneList\n    })\n  }\n\n\n  render() {\n    return (\n      <>\n        <Addtask\n          value={this.state.inputValue}\n          getInputValue={this.handleInputValue}\n          addTask={this.handleAddTask}\n          date={this.state.date}\n          getDate={this.handleDate}\n          minDate={this.currentDate}\n          emptyTask={this.state.emptyTask}\n        />\n        <List\n          doneList={this.state.doneList}\n          done={this.handleDoneTasks}\n          delete={this.handleDeleteTask}\n          list={this.state.list}\n          date={this.state.date}\n        />\n      </ >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}